{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Blog Marc Dobler",
  "language": "en",
  "home_page_url": "https://www.marcdobler.com/",
  "feed_url": "https://www.marcdobler.com/feed/feed.json",
  "description": "Experiences, Self development DIY projects, How to sharing...",
  "author": {
    "name": "Marc Dobler",
    "url": "https://www.marcdobler.com/about-me/"
  },
  "items": [{
      "id": "https://www.marcdobler.com/posts/how-to-calibrate-z-offset-with-a-bltouch-bed-leveling-probe/",
      "url": "https://www.marcdobler.com/posts/how-to-calibrate-z-offset-with-a-bltouch-bed-leveling-probe/",
      "title": "How to calibrate Z-Offset with a BLTouch bed leveling probe?",
      "content_html": "<h2>Requirements</h2>\n<ul>\n<li>Any kind of software you can send GCODE through the terminal like Octoprint</li>\n<li>Piece of paper 90g/cm3</li>\n</ul>\n<h2>Z-Offset Instructions:</h2>\n<ul>\n<li>G28 – Home 3D printer</li>\n<li>M851 Z0 – Reset Z0 Offset</li>\n<li>M500 – Store setting to EEPROM</li>\n<li>M501 – Set active parameters</li>\n<li>M503 – Display Active Parameters</li>\n<li>G28 Z – Home Z-Axis</li>\n<li>G1 F60 Z0 – Move nozzle to true 0 offset</li>\n<li>M211 S0 – Switch off soft endstops</li>\n<li>Move nozzle towards bed slowly until the paper can barely move</li>\n<li>Take note of the Z on the printer display (take that number and add the measurement of the calibration sheet or device used)</li>\n<li>M851 Z X.XX (X.XX being your z offset achieved)</li>\n<li>M211 S1 – Enable Soft Endstops</li>\n<li>M500 – Save settings to Eeprom</li>\n<li>M501 – Set Active Parameters</li>\n<li>M503 – display current settings</li>\n</ul>\n<p>Enjoy!</p>\n",
      "date_published": "2020-05-28T00:00:00Z"
    },{
      "id": "https://www.marcdobler.com/posts/Configuring-Marlin-2-0-for-an-Ender-3-Pro-and-BLTouch/",
      "url": "https://www.marcdobler.com/posts/Configuring-Marlin-2-0-for-an-Ender-3-Pro-and-BLTouch/",
      "title": "How to configure Marlin 2.0 for an Ender 3 / Pro and BLTouch",
      "content_html": "<h2>The Template</h2>\n<p>Firstly, you’ll need the Marlin firmware with the appropriate template settings.</p>\n<ol>\n<li>Start by downloading the latest stable release of Marlin from here and the configuration files here.</li>\n<li>Extract the zip.</li>\n<li>Copy the 4 files from config/examples/Creality/Ender-3 to the Marlin/ folder, overwriting the 2 already there.</li>\n</ol>\n<h2>Configuration.h</h2>\n<p>Open the new Marlin/Configuration.h file using a text editor suitable for code, like vs code. We’ll customize our configuration now:</p>\n<ol>\n<li>\n<p>Change <code>STRING_CONFIG_H_AUTHOR</code> to clearly differentiate the configuration from the default</p>\n</li>\n<li>\n<p>Disable <code>SHOW_BOOTSCREEN</code> and <code>SHOW_CUSTOM_BOOTSCREEN</code> to save space by commenting out the lines (prefix them with //  )</p>\n</li>\n<li>\n<p>Ensure you have the correct <code>BAUDRATE</code>. The original Ender 3 was configured to 115200 by Creality, but the newer Ender 3 Pro (and newer Creality motherboards) default to 250000. You may be fine with 250000 on an older Ender 3.</p>\n</li>\n<li>\n<p>Change <code>CUSTOM_MACHINE_NAME</code> to represent your printer, e.g. &quot;Ender 3 Pro&quot;</p>\n</li>\n<li>\n<p>If you’re using a BLTouch ABL sensor:</p>\n<ol>\n<li>Uncomment <code>#define BLTOUCH</code></li>\n<li><code>#define SERVO0_PIN 27</code> is not required to set up your BLTouch in Marlin 2.x, as it’s defined in the pins folder by default</li>\n<li>You’ll need to customize the offset between Probe and Extruder. In Marlin 1.x, this was done with X, Y, and 4. <code>Z_PROBE_OFFSET_FROM_EXTRUDER</code>. In Marlin 2.x, they’re now combined in <code>NOZZLE_TO_PROBE_OFFSET</code>. Instructions are in the comments. Using the Creality BLTouch Kit bracket, mine is { -43, -9, 0 }. It’s safer to leave Z as 0 here are calibrate this yourself later.</li>\n<li>To keep the probe away from the edge of the bed, increase <code>PROBING_MARGIN</code> to 20</li>\n<li>You can increase <code>XY_PROBE_SPEED</code> to 10000 to speed up probing slightly</li>\n<li>Uncomment #define <code>AUTO_BED_LEVELING_BILINEAR</code> to enable bilinear ABL</li>\n<li>By default, bilinear ABL uses a 3×3 grid. You can change this by editing <code>GRID_MAX_POINTS_X</code> under <code>EITHER</code>(<code>AUTO_BED_LEVELING_LINEAR</code>, <code>AUTO_BED_LEVELING_BILINEAR</code>). Mine is set to 5, for a 5×5 grid</li>\n<li>Uncomment <code>#define LCD_BED_LEVELING</code> to add bed leveling menu items</li>\n</ol>\n</li>\n<li>\n<p>If your bed is non-standard, you’ll need to adjust the size and/or travel limits to make sure Marlin knows this. I use bulldog clips to secure a glass bed. To ensure the nozzle stays clear of the clips, I’ve changed the following: <code>Y_BED_SIZE</code> from 235 to 199, <code>X_MIN_POS</code> from 0 to -2, <code>Y_MIN_POS</code> from 0 to -24.</p>\n</li>\n<li>\n<p>Uncomment <code>Z_SAFE_HOMING</code>. This prevents your Z homing from occurring without prior X and Y homing. Without this, you may accidentally miss the bed when homing Z.</p>\n</li>\n<li>\n<p>To increase the homing speed, increase <code>HOMING_FEEDRATE_XY</code> from (20<em>60) to (40</em>60) and <code>HOMING_FEEDRATE_Z</code> from (4<em>60) to (8</em>60).</p>\n</li>\n<li>\n<p>If you want to use PID to efficiently heat your bed, uncomment <code>#define PIDTEMPBED</code>. You’ll need to calibrate this later.</p>\n</li>\n<li>\n<p>If you’re using a “silent” Creality board v1.1.4 or v1.1.5, you’re using TMC2208 drivers in standalone mode. Uncomment X, Y, Z, and <code>E0_DRIVER_TYPE</code> and set them to <code>TMC2208_STANDALONE</code>.</p>\n</li>\n<li>\n<p>To save space, uncomment #define SLIM_LCD_MENUS. This will remove any menu items that you won’t need if controlling using a PC or OctoPrint.</p>\n</li>\n<li>\n<p>To save space, comment out <code>#define SPEAKER</code>. This will stop fully disable the speaker.</p>\n</li>\n<li>\n<p>To save space if you won’t be printing from an SD card, comment out #define <code>SDSUPPORT</code>.</p>\n</li>\n<li>\n<p>Save the file and close the file.</p>\n</li>\n</ol>\n<h2>Configuration_adv.h</h2>\n<p>Open the new Marlin/Configuration_adv.h file in your chosen text editor.</p>\n<ol>\n<li>If you’re using a BLTouch:\n<ol>\n<li>Uncomment <code>#define BLTOUCH_DELAY</code> and change from 500 to 200. This reduces the pause after each individual probe.</li>\n<li>Baby stepping allows the nozzle to move a tiny amount without changing the recorded coordinates for the hot-end. This is usually used for calibrating your Z Offset for a perfect first layer. You can increase <code>BABYSTEP_MULTIPLICATOR_Z</code> and <code>_XY</code> to 10 for faster motion.</li>\n<li>Uncomment <code>BABYSTEP_ZPROBE_OFFSET</code> and <code>#define BABYSTEP_ZPROBE_GFX_OVERLAY</code></li>\n</ol>\n</li>\n<li>If you want to use Linear Advance to increase your print quality at higher speeds, uncomment <code>#define LIN_ADVANCE</code> and set <code>LIN_ADVANCE_K</code> from 0.22 to 0, which will enable the feature but turn it off. Your GCODE will need to specify the K value, which you’ll calibrate later. You need different K values for different filament types. Note that LinearsAdvance is not compatible with the TMC2208 stepper driver in Standalone mode (using StealthChop), so will not worth it with Creality “silent” boards v1.1.4 and v1.1.5.</li>\n<li>To save space, comment out #define <code>ARC_SUPPORT</code>. This feature is used by other types of CNC machines, but usually not 3D printers.</li>\n<li>If you want to display progress and time remaining from another system with the M73 command, such as OctoPrint, uncomment <code>LCD_SET_PROGRESS_MANUALLY</code>. If your system will also send the M73 R parameter to update the time remaining, uncomment <code>USE_M73_REMAINING_TIME</code>.</li>\n<li>Marlin watches the rate of temperature increase for hot-end and bed. If it’s too slow, it will trigger an error and halt your print. If you have the windows open for ventilation and it’s cold out, this can be a problem. Increase <code>WATCH_BED_TEMP_PERIOD</code> a little if you have this issue.<br>\nSave your changes and close the file.</li>\n</ol>\n<h2>To The Printer!</h2>\n<p>Take a copy of your <code>M503</code> output to save your current printer settings. You’ll need to put some of these back later.</p>\n<p>Open Marlin/Marlin.ino with the Visual Studio Code, compile with PlateformIO, and write the new firmware to your printer.</p>\n<p>Run M502 to set all settings to those specified in your firmware files, then M500 to store these settings in the EEPROM.</p>\n<p>Depending on your configuration, you’ll now want to calibrate your Z-Probe Offset, PID for Hotend and Heated Bed and Linear Advance, or set them from your previous values.</p>\n<p>Enjoy!</p>\n",
      "date_published": "2020-05-20T00:00:00Z"
    },{
      "id": "https://www.marcdobler.com/posts/how-to-compile-and-install-wxPython-on-raspberry-pi/",
      "url": "https://www.marcdobler.com/posts/how-to-compile-and-install-wxPython-on-raspberry-pi/",
      "title": "How to compile and install wxPython on Raspberry Pi?",
      "content_html": "<p>If you need to install wxPython on Raspbian Buster for a project, the installation of that module can be a little bit tricky. It needs to be compiled for Raspbian from source files to have something working nicely.</p>\n<p>Here you can find step by step explanation of how to do it.</p>\n<h2>Requirements</h2>\n<ul>\n<li>Raspberry Pi</li>\n<li>Python 3.x</li>\n<li>time, lots of time</li>\n</ul>\n<h2>Step 1</h2>\n<p>First, you need to open a terminal (shortcut ctrl + alt + t)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> dpkg-dev build-essential libjpeg-dev libtiff-dev libsdl1.2-dev libgstreamer-plugins-base0.10-dev libnotify-dev freeglut3 freeglut3-dev libwebkitgtk-dev libghc-gtk3-dev libwxgtk3.0-gtk3-dev</code></pre>\n<p>if you use the pre-installed Python 3:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> python3.7-dev</code></pre>\n<h2>Step 2</h2>\n<p>Now, let’s make the virtual environment. I made mine right off the /home/pi directory, but you can put it anywhere. Some like to put all their virtual environments (virtenv) in specific locations.</p>\n<p>Let’s make one (wx is the name of the virtenv we are creating, change it to suit):</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\">python3 -m venv wx</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/wx/bin/activate</code></pre>\n<h2>Step 3</h2>\n<p>The first thing you need is wxPython.</p>\n<p>Go to:</p>\n<p><a href=\"https://pypi.org/project/wxPython/#files\">https://pypi.org/project/wxPython/#files</a></p>\n<p>Down of the bottom of the choices, you will see “wxPython-4.1.0.tar.gz … Source”.</p>\n<p>Download wxPython-4.1.0.tar.gz</p>\n<p>Use your browser if you can. The file should go into your ~/Downloads folder. The link currently is the very human unfriendly:</p>\n<p><a href=\"https://files.pythonhosted.org/packages/cb/4f/1e21d3c079c973ba862a18f3be73c2bbe2e6bc25c96d94df605b5cbb494d/wxPython-4.1.0.tar.gz\">https://files.pythonhosted.org/packages/cb/4f/1e21d3c079c973ba862a18f3be73c2bbe2e6bc25c96d94df605b5cbb494d/wxPython-4.1.0.tar.gz</a></p>\n<p>Okay, that’s not exactly a professional comment but sometimes you just have to call it what it is.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> ~Downloads/wxPython-4.1.0.tar.gz</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> xf wxPython-4.1.0.tar.gz</code></pre>\n<p>Next step, make sure you are in the environment you want to install wxPython into.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> wxPython-4.1.0</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> -r requirements.txt</code></pre>\n<p>The next part is the big one. This will take a while, anywhere from a few hours to 18+ hours on a Raspberry Pi Zero.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">python3 build.py build bdist_wheel --jobs<span class=\"token operator\">=</span><span class=\"token number\">1</span></code></pre>\n<h2>After waiting ~ 8 hours</h2>\n<p>Now to install it in Python as a package (the name of this file varies depending on the Python version you build it with. ie. wxPython-4.1.0-cp38-cp38-linux_armv7l.whl for Python 3.8) :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/wxPython-4.1.0/dist</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> wxPython-4.1.0-cp37-cp37m-linux_armv7l.whl</code></pre>\n<h2>After waiting ~ 1 hour</h2>\n<p>Now let’s test it:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/wxPython-4.1.0.post2/demo</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\">python3 demo.py</code></pre>\n<p>Enjoy!</p>\n",
      "date_published": "2020-05-18T00:00:00Z"
    },{
      "id": "https://www.marcdobler.com/projects/2021-03-18-make-ESP32-temperature-probe/",
      "url": "https://www.marcdobler.com/projects/2021-03-18-make-ESP32-temperature-probe/",
      "title": "Make an ESP32 temperature probe for reef tank",
      "content_html": "",
      "date_published": "2021-03-18T00:00:00Z"
    },{
      "id": "https://www.marcdobler.com/projects/2021-02-19-diy-an-ATO-pump-for-pico-reef-tank/",
      "url": "https://www.marcdobler.com/projects/2021-02-19-diy-an-ATO-pump-for-pico-reef-tank/",
      "title": "DIY an ATO pump for pico reef tank",
      "content_html": "",
      "date_published": "2021-02-19T00:00:00Z"
    },{
      "id": "https://www.marcdobler.com/projects/2020-05-28-pico-fish-tank/",
      "url": "https://www.marcdobler.com/projects/2020-05-28-pico-fish-tank/",
      "title": "Build a pico reef tank",
      "content_html": "",
      "date_published": "2020-05-28T00:00:00Z"
    }
  ]
}
