{"version":3,"file":"service-worker.js","sources":["node_modules/workbox-core/_version.js","node_modules/workbox-core/_private/logger.js","node_modules/workbox-core/models/messages/messageGenerator.js","node_modules/workbox-core/_private/WorkboxError.js","node_modules/workbox-routing/_version.js","node_modules/workbox-routing/utils/constants.js","node_modules/workbox-routing/utils/normalizeHandler.js","node_modules/workbox-routing/Route.js","node_modules/workbox-routing/RegExpRoute.js","node_modules/workbox-routing/Router.js","node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","node_modules/workbox-routing/registerRoute.js","node_modules/workbox-strategies/_version.js","node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","node_modules/workbox-core/_private/cacheNames.js","node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","node_modules/workbox-core/_private/Deferred.js","node_modules/workbox-core/models/quotaErrorCallbacks.js","node_modules/workbox-strategies/StrategyHandler.js","node_modules/workbox-core/_private/timeout.js","node_modules/workbox-core/_private/getFriendlyURL.js","node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","node_modules/workbox-strategies/Strategy.js","node_modules/workbox-core/_private/waitUntil.js","node_modules/workbox-precaching/_version.js","node_modules/workbox-precaching/utils/createCacheKey.js","node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","node_modules/workbox-core/copyResponse.js","node_modules/workbox-precaching/PrecacheStrategy.js","node_modules/workbox-precaching/PrecacheController.js","node_modules/workbox-precaching/PrecacheRoute.js","node_modules/workbox-precaching/utils/generateURLVariations.js","node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","node_modules/workbox-core/setCacheNameDetails.js","node_modules/workbox-precaching/precacheAndRoute.js","../../../../../tmp/277a92a259d5919fd5051d59c3e85e3b/service-worker.js","node_modules/workbox-core/clientsClaim.js","node_modules/workbox-precaching/precache.js","node_modules/workbox-precaching/addRoute.js","node_modules/workbox-precaching/cleanupOutdatedCaches.js","node_modules/workbox-precaching/utils/deleteOutdatedCaches.js","node_modules/workbox-strategies/NetworkFirst.js","node_modules/workbox-strategies/StaleWhileRevalidate.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production' ? null : (() => {\n    // Don't overwrite this value if it's already set.\n    // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n    if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: `#7f8c8d`,\n        log: `#2ecc71`,\n        warn: `#f39c12`,\n        error: `#c0392b`,\n        groupCollapsed: `#3498db`,\n        groupEnd: null,\n    };\n    const print = function (method, args) {\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === 'groupCollapsed') {\n            // Safari doesn't print all console.groupCollapsed() arguments:\n            // https://bugs.webkit.org/show_bug.cgi?id=182754\n            if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            `border-radius: 0.5em`,\n            `color: white`,\n            `font-weight: bold`,\n            `padding: 2px 0.5em`,\n        ];\n        // When in a group, the workbox prefix is not displayed.\n        const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n        console[method](...logPrefix, ...args);\n        if (method === 'groupCollapsed') {\n            inGroup = true;\n        }\n        if (method === 'groupEnd') {\n            inGroup = false;\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const api = {};\n    const loggerMethods = Object.keys(methodToColorMap);\n    for (const key of loggerMethods) {\n        const method = key;\n        api[method] = (...args) => {\n            print(method, args);\n        };\n    }\n    return api;\n})());\nexport { logger };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\n    fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {module:workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            if (event.data && event.data.type === 'CACHE_URLS') { // eslint-disable-line\n                const { payload } = event.data; // eslint-disable-line\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @memberof module:workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http') ?\n                captureUrl.pathname : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if ((new RegExp(`${wildcards}`)).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if ((url.pathname === captureUrl.pathname) &&\n                    (url.origin !== captureUrl.origin)) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return (typeof input === 'string') ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * [handle()]{@link module:workbox-strategies.Strategy~handle} or\n * [handleAll()]{@link module:workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof module:workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {module:workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     *     [match callback]{@link module:workbox-routing~matchCallback},\n     *     (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * [match callback]{@link module:workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = await event.preloadResponse;\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail') ?\n            request.clone() : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', { thrownErrorMessage: err.message });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ?\n                undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse = (await callback({\n                cacheName,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n                event: this.event,\n            })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback ? await cacheMatchIgnoreParams(\n        // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n        // feature. Consider into ways to only add this behavior if using\n        // precaching.\n        cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions) :\n            null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ?\n                responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        if (!this._cacheKeys[mode]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params,\n                }));\n            }\n            this._cacheKeys[mode] = effectiveRequest;\n        }\n        return this._cacheKeys[mode];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * [`iterateCallbacks()`]{@link module:workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * [`doneWaiting()`]{@link module:workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * [`waitUntil()`]{@link module:workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while (promise = this._extendLifetimePromises.shift()) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache = (await callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event,\n            })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof module:workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof module:workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * [workbox-core]{@link module:workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * [route]{@link module:workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to [`handle()`]{@link module:workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of [response, done] promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string' ?\n            new Request(options.request) :\n            options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the [`handler`]{@link module:workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {module:workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof module:workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state && state.originalRequest\n                    && state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof module:workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream() ?\n        clonedResponse.body : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A [Strategy]{@link module:workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * [PrecacheController]{@link module:workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            response = await handler.fetch(new Request(request, {\n                integrity: integrityInRequest || integrityInManifest,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            if (integrityInManifest && noIntegrityConflict) {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof module:workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {module:workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<module:workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = (typeof entry !== 'string' && entry.revision) ?\n                'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<module:workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<module:workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {module:workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of [Route]{@link module:workbox-routing.Route} that takes a\n * [PrecacheController]{@link module:workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof module:workbox-precaching\n * @extends module:workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` +\n                    getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from './_private/assert.js';\nimport { cacheNames } from './_private/cacheNames.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Modifies the default cache names used by the Workbox packages.\n * Cache names are generated as `<prefix>-<Cache Name>-<suffix>`.\n *\n * @param {Object} details\n * @param {Object} [details.prefix] The string to add to the beginning of\n *     the precache and runtime cache names.\n * @param {Object} [details.suffix] The string to add to the end of\n *     the precache and runtime cache names.\n * @param {Object} [details.precache] The cache name to use for precache\n *     caching.\n * @param {Object} [details.runtime] The cache name to use for runtime caching.\n * @param {Object} [details.googleAnalytics] The cache name to use for\n *     `workbox-google-analytics` caching.\n *\n * @memberof module:workbox-core\n */\nfunction setCacheNameDetails(details) {\n    if (process.env.NODE_ENV !== 'production') {\n        Object.keys(details).forEach((key) => {\n            assert.isType(details[key], 'string', {\n                moduleName: 'workbox-core',\n                funcName: 'setCacheNameDetails',\n                paramName: `details.${key}`,\n            });\n        });\n        if ('precache' in details && details['precache'].length === 0) {\n            throw new WorkboxError('invalid-cache-name', {\n                cacheNameId: 'precache',\n                value: details['precache'],\n            });\n        }\n        if ('runtime' in details && details['runtime'].length === 0) {\n            throw new WorkboxError('invalid-cache-name', {\n                cacheNameId: 'runtime',\n                value: details['runtime'],\n            });\n        }\n        if ('googleAnalytics' in details && details['googleAnalytics'].length === 0) {\n            throw new WorkboxError('invalid-cache-name', {\n                cacheNameId: 'googleAnalytics',\n                value: details['googleAnalytics'],\n            });\n        }\n    }\n    cacheNames.updateDetails(details);\n}\nexport { setCacheNameDetails };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * [precache()]{@link module:workbox-precaching.precache} and\n * [addRoute()]{@link module:workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See\n * [PrecacheRoute options]{@link module:workbox-precaching.PrecacheRoute}.\n *\n * @memberof module:workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","import {registerRoute as workbox_routing_registerRoute} from '/home/runner/work/marcdobler.github.io/marcdobler.github.io/node_modules/workbox-routing/registerRoute.mjs';\nimport {NetworkFirst as workbox_strategies_NetworkFirst} from '/home/runner/work/marcdobler.github.io/marcdobler.github.io/node_modules/workbox-strategies/NetworkFirst.mjs';\nimport {StaleWhileRevalidate as workbox_strategies_StaleWhileRevalidate} from '/home/runner/work/marcdobler.github.io/marcdobler.github.io/node_modules/workbox-strategies/StaleWhileRevalidate.mjs';\nimport {setCacheNameDetails as workbox_core_setCacheNameDetails} from '/home/runner/work/marcdobler.github.io/marcdobler.github.io/node_modules/workbox-core/setCacheNameDetails.mjs';\nimport {clientsClaim as workbox_core_clientsClaim} from '/home/runner/work/marcdobler.github.io/marcdobler.github.io/node_modules/workbox-core/clientsClaim.mjs';\nimport {precacheAndRoute as workbox_precaching_precacheAndRoute} from '/home/runner/work/marcdobler.github.io/marcdobler.github.io/node_modules/workbox-precaching/precacheAndRoute.mjs';\nimport {cleanupOutdatedCaches as workbox_precaching_cleanupOutdatedCaches} from '/home/runner/work/marcdobler.github.io/marcdobler.github.io/node_modules/workbox-precaching/cleanupOutdatedCaches.mjs';/**\n * Welcome to your Workbox-powered service worker!\n *\n * You'll need to register this file in your web app.\n * See https://goo.gl/nhQhGp\n *\n * The rest of the code is auto-generated. Please don't update this file\n * directly; instead, make changes to your Workbox build configuration\n * and re-run your build process.\n * See https://goo.gl/2aRDsh\n */\n\n\n\n\n\nworkbox_core_setCacheNameDetails({prefix: \"EleventyPluginWorkbox\"});\n\n\nself.skipWaiting();\n\nworkbox_core_clientsClaim();\n\n\n/**\n * The precacheAndRoute() method efficiently caches and responds to\n * requests for URLs in the manifest.\n * See https://goo.gl/S9QRab\n */\nworkbox_precaching_precacheAndRoute([\n  {\n    \"url\": \"/404.html\",\n    \"revision\": \"85a55f5a0356c8cc1d46aed3166d133c\"\n  },\n  {\n    \"url\": \"/index.html\",\n    \"revision\": \"0cac414b490e4e354e0125b3088a2b5b\"\n  },\n  {\n    \"url\": \"/about/index.html\",\n    \"revision\": \"81afe09b74fcfc557fb9360941b2a315\"\n  },\n  {\n    \"url\": \"/css/index.css\",\n    \"revision\": \"1c2ce8e4bcc9d58af2585c21a80a05ae\"\n  },\n  {\n    \"url\": \"/css/prism-base16-monokai.dark.css\",\n    \"revision\": \"f25dd8c9739655b7e9665814c107bc63\"\n  },\n  {\n    \"url\": \"/feed/feed.json\",\n    \"revision\": \"0f6ab6b1acf115b4e7696195081bf1db\"\n  },\n  {\n    \"url\": \"/fish/acanthemblemaria-hancocki/index.html\",\n    \"revision\": \"1593077fb8f990c36b29fc76d377af5e\"\n  },\n  {\n    \"url\": \"/fish/amblyeleotris-aurora/index.html\",\n    \"revision\": \"e6cd8bff377f6fe248c5e84d04b76a59\"\n  },\n  {\n    \"url\": \"/fish/amblyeleotris-guttata/index.html\",\n    \"revision\": \"4496ed134c940d8188eb1c48e72798af\"\n  },\n  {\n    \"url\": \"/fish/amblyeleotris-randalli/index.html\",\n    \"revision\": \"101eaa2293e9082a08e2c0812526b800\"\n  },\n  {\n    \"url\": \"/fish/amblyeleotris-wheeleri/index.html\",\n    \"revision\": \"73fd670924db9cebb197d4205297b208\"\n  },\n  {\n    \"url\": \"/fish/amphiprion-ocellaris/index.html\",\n    \"revision\": \"e929dad378762745f00becae83834fc4\"\n  },\n  {\n    \"url\": \"/fish/amphiprion-percula/index.html\",\n    \"revision\": \"7a245e83c9fef8feb190ff29a94733ec\"\n  },\n  {\n    \"url\": \"/fish/antennarius-maculatus/index.html\",\n    \"revision\": \"46090d76915c5ac2ac0c89fd99d13895\"\n  },\n  {\n    \"url\": \"/fish/antennarius-pictus/index.html\",\n    \"revision\": \"f7923cecb4aa1712803de3a1c7274777\"\n  },\n  {\n    \"url\": \"/fish/antennarius-sp/index.html\",\n    \"revision\": \"4e6a91937db18ff29fb936c8a42fe5bd\"\n  },\n  {\n    \"url\": \"/fish/caracanthus-unipinna/index.html\",\n    \"revision\": \"6fd4011da06a0c2a61ce6ed5dbfe8a79\"\n  },\n  {\n    \"url\": \"/fish/ecsenius-bimaculatus/index.html\",\n    \"revision\": \"ed837b542c8db36160ae4c0bd224656a\"\n  },\n  {\n    \"url\": \"/fish/ecsenius-gravieri/index.html\",\n    \"revision\": \"a61ebb2d605d20595902db6be86fec4f\"\n  },\n  {\n    \"url\": \"/fish/ecsenius-lividanalis/index.html\",\n    \"revision\": \"e075df2a48f2f45b939c72c834ee5beb\"\n  },\n  {\n    \"url\": \"/fish/ecsenius-opsifrontalis/index.html\",\n    \"revision\": \"34ff5979b19ba3bbf37f45446b69c9cf\"\n  },\n  {\n    \"url\": \"/fish/ecsenius-stigmatura/index.html\",\n    \"revision\": \"11740c09a19001e661a0222003ff748c\"\n  },\n  {\n    \"url\": \"/fish/elacatinus-figaro/index.html\",\n    \"revision\": \"db7c456b3e82322b783362aa1d32193b\"\n  },\n  {\n    \"url\": \"/fish/elacatinus-prochilos/index.html\",\n    \"revision\": \"d04f48e00bd42fdf693d4c9c8e0def8e\"\n  },\n  {\n    \"url\": \"/fish/elacatinus-puncticulatus/index.html\",\n    \"revision\": \"63013ed68b871e41d045ae07707e3122\"\n  },\n  {\n    \"url\": \"/fish/eviota-nigriventris/index.html\",\n    \"revision\": \"8c7841f349fac006517db0162bd787be\"\n  },\n  {\n    \"url\": \"/fish/eviota-pellucida/index.html\",\n    \"revision\": \"1ccd598954386d896f6fc64359c8b1ea\"\n  },\n  {\n    \"url\": \"/fish/fusigobius-pallidus/index.html\",\n    \"revision\": \"4e68aadd4044c39d9cc720bcb6aa79dc\"\n  },\n  {\n    \"url\": \"/fish/gobiodon-citrinus/index.html\",\n    \"revision\": \"2657740b82a5d574ee7be215019e31fc\"\n  },\n  {\n    \"url\": \"/fish/gobiodon-okinawae/index.html\",\n    \"revision\": \"88d328f21067a3dfd321c16b4b097981\"\n  },\n  {\n    \"url\": \"/fish/gobiodon-strangulatus/index.html\",\n    \"revision\": \"4b034af024103da8f0d09a56a216ee2f\"\n  },\n  {\n    \"url\": \"/fish/gobiopsis-quinquecincta/index.html\",\n    \"revision\": \"587a53f333f2a81cea36b9320bf776be\"\n  },\n  {\n    \"url\": \"/fish/index.html\",\n    \"revision\": \"1810715793aaa8beb92b99ad856779b7\"\n  },\n  {\n    \"url\": \"/fish/koumansetta-hectori/index.html\",\n    \"revision\": \"6c983f0c490464b9a151582302e3605e\"\n  },\n  {\n    \"url\": \"/fish/koumansetta-rainfordi/index.html\",\n    \"revision\": \"fe0dfe6fcbfe78bf236e8da4a6a602df\"\n  },\n  {\n    \"url\": \"/fish/liopropoma-carmabi/index.html\",\n    \"revision\": \"695c224e83e554f9b56609d2c72910b1\"\n  },\n  {\n    \"url\": \"/fish/liopropoma-mowbrayi/index.html\",\n    \"revision\": \"8484d75712a496119af99ac6f4c5129c\"\n  },\n  {\n    \"url\": \"/fish/liopropoma-rubre/index.html\",\n    \"revision\": \"e97543bf6509cc59e4da9d337ee5b17a\"\n  },\n  {\n    \"url\": \"/fish/lythrypnus-dalli/index.html\",\n    \"revision\": \"0b4fe2db8c64ddffa0ae11445835cea4\"\n  },\n  {\n    \"url\": \"/fish/lythrypnus-zebra/index.html\",\n    \"revision\": \"2724a02595bbe0f63bb40ca634305506\"\n  },\n  {\n    \"url\": \"/fish/nemateleotris-decora/index.html\",\n    \"revision\": \"6f679e087b8231160fde583e4c56b6e7\"\n  },\n  {\n    \"url\": \"/fish/nemateleotris-exquisita/index.html\",\n    \"revision\": \"71fd3e046903c73c66ad3252f587b34f\"\n  },\n  {\n    \"url\": \"/fish/nemateleotris-helfrichi/index.html\",\n    \"revision\": \"be34d1d39dc9ce65b9fdeadc098896ec\"\n  },\n  {\n    \"url\": \"/fish/nemateleotris-magnifica/index.html\",\n    \"revision\": \"cb78e77915909819fd3f134436957d03\"\n  },\n  {\n    \"url\": \"/fish/paragobius-lacunicolus/index.html\",\n    \"revision\": \"c33d7dbb84fbb164cb5cd8ff7f1be7f3\"\n  },\n  {\n    \"url\": \"/fish/pseudocheilinops-ataenia/index.html\",\n    \"revision\": \"e55f4d08029f4b6f15db972efca9cd0a\"\n  },\n  {\n    \"url\": \"/fish/signigobius-biocellatus/index.html\",\n    \"revision\": \"cb3d3bf66c1d838560579e6afc1b2f48\"\n  },\n  {\n    \"url\": \"/fish/sphaeramia-nematoptera/index.html\",\n    \"revision\": \"b19810f69e60bc0ff9f491591d160179\"\n  },\n  {\n    \"url\": \"/fish/stiphodon-atropurpureus/index.html\",\n    \"revision\": \"f9df76a20cf6da1815ec053cd4cf9033\"\n  },\n  {\n    \"url\": \"/fish/stonogobiops-dracula/index.html\",\n    \"revision\": \"9d76368da58a6afdd2f9d663cd48797a\"\n  },\n  {\n    \"url\": \"/fish/stonogobiops-nematodes/index.html\",\n    \"revision\": \"7b8bfbcaae653dfdaaa8b06ac180ba0f\"\n  },\n  {\n    \"url\": \"/fish/stonogobiops-yasha/index.html\",\n    \"revision\": \"426d33f119aeb79da4ac98d3d9c9330a\"\n  },\n  {\n    \"url\": \"/fish/tigrigobius-multifasciatus/index.html\",\n    \"revision\": \"d6d0e76d83cbb778bd8d9a44e5977453\"\n  },\n  {\n    \"url\": \"/fish/trimma-caesiura/index.html\",\n    \"revision\": \"01c4d0cfe9e4dc320252f76c6fafc67a\"\n  },\n  {\n    \"url\": \"/fish/trimma-cana/index.html\",\n    \"revision\": \"a2eeac564c2b7d9f5c3e90743489097a\"\n  },\n  {\n    \"url\": \"/fish/trimma-kitrinum/index.html\",\n    \"revision\": \"8856a605bf65ea148aebb961039b0d5f\"\n  },\n  {\n    \"url\": \"/fish/trimma-maiandros/index.html\",\n    \"revision\": \"92579e8dce0336fdbd477f49c7bf5688\"\n  },\n  {\n    \"url\": \"/fish/trimma-rubromaculatus/index.html\",\n    \"revision\": \"719a626e858a8ea48cd4aa8059c783b9\"\n  },\n  {\n    \"url\": \"/fish/wetmorella-albofasciata/index.html\",\n    \"revision\": \"b7af74181cab9a0fcad1c69e4266c4bb\"\n  },\n  {\n    \"url\": \"/fish/wetmorella-nigropinnata/index.html\",\n    \"revision\": \"631fb36985dab6b294d6808bee84b0d9\"\n  },\n  {\n    \"url\": \"/fish/wetmorella-tanakai/index.html\",\n    \"revision\": \"2b01c47f3e15448b9108e542ae74122a\"\n  },\n  {\n    \"url\": \"/fish/zoramia-leptacantha/index.html\",\n    \"revision\": \"0332193b9a66562fc5b6a46595191e8a\"\n  },\n  {\n    \"url\": \"/img/5b9387aa-300.avif\",\n    \"revision\": \"3a566e3f78b47f6db5099022dc309af4\"\n  },\n  {\n    \"url\": \"/img/5b9387aa-300.jpeg\",\n    \"revision\": \"90d0ef164be7f0d0d0c73e77c06e8f5f\"\n  },\n  {\n    \"url\": \"/img/5b9387aa-300.webp\",\n    \"revision\": \"bea3d6ac80bc84fff96207a73dccbdd0\"\n  },\n  {\n    \"url\": \"/img/5b9387aa-600.avif\",\n    \"revision\": \"b3ca7b14e3e8d8c7a11685c84bb386db\"\n  },\n  {\n    \"url\": \"/img/5b9387aa-600.jpeg\",\n    \"revision\": \"9c394f01e12e81b354596617da39f65f\"\n  },\n  {\n    \"url\": \"/img/5b9387aa-600.webp\",\n    \"revision\": \"07b7d01cd00e242cbb5028a198cde218\"\n  },\n  {\n    \"url\": \"/img/e55326d3-128.jpeg\",\n    \"revision\": \"db6d970d20e27cfd5c7a57074b3a6d17\"\n  },\n  {\n    \"url\": \"/img/e55326d3-128.webp\",\n    \"revision\": \"081764d2e0fa7a12d0661c6014d0f147\"\n  },\n  {\n    \"url\": \"/img/fish/chrysiptera-parasema.jpg\",\n    \"revision\": \"20ef2c1167fd9c95abb04bfe891742e6\"\n  },\n  {\n    \"url\": \"/img/fish/nemateleotris-decora.jpg\",\n    \"revision\": \"9682c3bee303271db6855fcea0b4d6db\"\n  },\n  {\n    \"url\": \"/img/fish/nemateleotris-exquisita.jpg\",\n    \"revision\": \"2dd6ae106f87d7513fb76c17224a8f6f\"\n  },\n  {\n    \"url\": \"/img/fish/nemateleotris-helfrichi.jpg\",\n    \"revision\": \"6e06a6ed34cc402e6322dcce3978a843\"\n  },\n  {\n    \"url\": \"/img/fish/pictichromis-porphyrea.jpg\",\n    \"revision\": \"71e46a159ce55a7703924c4bf9792c44\"\n  },\n  {\n    \"url\": \"/img/icon/android/android-launchericon-144-144.png\",\n    \"revision\": \"d6ff22cee5ff335a85f83ce3d501ab81\"\n  },\n  {\n    \"url\": \"/img/icon/android/android-launchericon-192-192.png\",\n    \"revision\": \"d898526fd09bb8303a38105a1508a3a7\"\n  },\n  {\n    \"url\": \"/img/icon/android/android-launchericon-48-48.png\",\n    \"revision\": \"e585f99a82d26fc26de6edd601882c75\"\n  },\n  {\n    \"url\": \"/img/icon/android/android-launchericon-512-512.png\",\n    \"revision\": \"ced97bd2f3cbd326784bd156d1e69d81\"\n  },\n  {\n    \"url\": \"/img/icon/android/android-launchericon-72-72.png\",\n    \"revision\": \"db2d955ad0333bfb97dbb56d1758b080\"\n  },\n  {\n    \"url\": \"/img/icon/android/android-launchericon-96-96.png\",\n    \"revision\": \"a518daa12dcf8ddcea341b467bf67bec\"\n  },\n  {\n    \"url\": \"/img/icon/apple/apple-touch-icon.png\",\n    \"revision\": \"e765ba66c216ea97bc2c1441dfba7401\"\n  },\n  {\n    \"url\": \"/img/icon/chrome/chrome-extensionmanagementpage-48-48.png\",\n    \"revision\": \"e585f99a82d26fc26de6edd601882c75\"\n  },\n  {\n    \"url\": \"/img/icon/chrome/chrome-favicon-16-16.png\",\n    \"revision\": \"cf17f52d47b83ac9169184c1652ce2bf\"\n  },\n  {\n    \"url\": \"/img/icon/chrome/chrome-installprocess-128-128.png\",\n    \"revision\": \"c6a52a86949a6d343dc1e57e11681190\"\n  },\n  {\n    \"url\": \"/img/icon/firefox/firefox-general-128-128.png\",\n    \"revision\": \"c6a52a86949a6d343dc1e57e11681190\"\n  },\n  {\n    \"url\": \"/img/icon/firefox/firefox-general-16-16.png\",\n    \"revision\": \"cf17f52d47b83ac9169184c1652ce2bf\"\n  },\n  {\n    \"url\": \"/img/icon/firefox/firefox-general-256-256.png\",\n    \"revision\": \"d5c8a69dee879a55e8e06c389530a7e8\"\n  },\n  {\n    \"url\": \"/img/icon/firefox/firefox-general-32-32.png\",\n    \"revision\": \"fa113a5cf442e25fece66b5b68741a21\"\n  },\n  {\n    \"url\": \"/img/icon/firefox/firefox-general-48-48.png\",\n    \"revision\": \"e585f99a82d26fc26de6edd601882c75\"\n  },\n  {\n    \"url\": \"/img/icon/firefox/firefox-general-64-64.png\",\n    \"revision\": \"9240c05cfce11e85f24475d575b0b0a1\"\n  },\n  {\n    \"url\": \"/img/icon/firefox/firefox-general-90-90.png\",\n    \"revision\": \"4383c7557372ca35fa20cd12996ba7b1\"\n  },\n  {\n    \"url\": \"/img/icon/firefox/firefox-marketplace-128-128.png\",\n    \"revision\": \"c6a52a86949a6d343dc1e57e11681190\"\n  },\n  {\n    \"url\": \"/img/icon/firefox/firefox-marketplace-512-512.png\",\n    \"revision\": \"ced97bd2f3cbd326784bd156d1e69d81\"\n  },\n  {\n    \"url\": \"/img/icon/msteams/msteams-192-192.png\",\n    \"revision\": \"d898526fd09bb8303a38105a1508a3a7\"\n  },\n  {\n    \"url\": \"/img/icon/msteams/msteams-silhouette-32-32.png\",\n    \"revision\": \"fa113a5cf442e25fece66b5b68741a21\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-smallsquare-24-24.png\",\n    \"revision\": \"1514b7cfd4219e842b3c0394e8d0d462\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-smallsquare-30-30.png\",\n    \"revision\": \"15044b25d56dc5c0ec8aee6079a26bc0\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-smallsquare-42-42.png\",\n    \"revision\": \"7688f984498215a5445e493c9debba16\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-smallsquare-54-54.png\",\n    \"revision\": \"a1f0cca1877c848754d1a5969dc13e93\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-splashscreen-1116-540.png\",\n    \"revision\": \"3371305825669eae524e0721648e62cd\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-splashscreen-620-300.png\",\n    \"revision\": \"fb47c4d6e1a68f35df7f59362cc068c6\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-splashscreen-868-420.png\",\n    \"revision\": \"b0f1e3164b8e42d8da9e19833c4b9fcf\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-squarelogo-120-120.png\",\n    \"revision\": \"d369d0b73fd4324d1e1ff0d02bcec7f1\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-squarelogo-150-150.png\",\n    \"revision\": \"7cbd409ba9cfca1af0d618a04095648f\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-squarelogo-210-210.png\",\n    \"revision\": \"47fca7ca661cde14f1d6cddcbd3da95b\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-squarelogo-270-270.png\",\n    \"revision\": \"b1f31458a56fb97767b5ee0ffd0dd994\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-storelogo-50-50.png\",\n    \"revision\": \"b950510fe848e7b99166407a4007c933\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-storelogo-70-70.png\",\n    \"revision\": \"3af17b16610d62b8f6e0d180cd9722bf\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windows-storelogo-90-90.png\",\n    \"revision\": \"4383c7557372ca35fa20cd12996ba7b1\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-appicon-106-106.png\",\n    \"revision\": \"71546e066617633caaeb8d726d068aee\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-appicon-44-44.png\",\n    \"revision\": \"279aac1d87d3d09665fb3f09bb35cf4c\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-appicon-62-62.png\",\n    \"revision\": \"abee0e0c69bd9f750327cc307fe13f4f\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-mediumtile-150-150.png\",\n    \"revision\": \"7cbd409ba9cfca1af0d618a04095648f\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-mediumtile-210-210.png\",\n    \"revision\": \"47fca7ca661cde14f1d6cddcbd3da95b\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-mediumtile-360-360.png\",\n    \"revision\": \"1068433c11b4413c9907d79c61817402\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-smalltile-170-170.png\",\n    \"revision\": \"4ea07341c55abe5de3ef8668fbf7bb15\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-smalltile-71-71.png\",\n    \"revision\": \"0ebc24840106b7539e84ac5df6567433\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-smalltile-99-99.png\",\n    \"revision\": \"756745d62646cfa3807b2637e56c7ad2\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-storelogo-120-120.png\",\n    \"revision\": \"d369d0b73fd4324d1e1ff0d02bcec7f1\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-storelogo-50-50.png\",\n    \"revision\": \"b950510fe848e7b99166407a4007c933\"\n  },\n  {\n    \"url\": \"/img/icon/windows/windowsphone-storelogo-70-70.png\",\n    \"revision\": \"3af17b16610d62b8f6e0d180cd9722bf\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/SplashScreen.scale-100.png\",\n    \"revision\": \"fb47c4d6e1a68f35df7f59362cc068c6\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/SplashScreen.scale-125.png\",\n    \"revision\": \"c89facc7fc392519e0b969b736aaba6c\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/SplashScreen.scale-150.png\",\n    \"revision\": \"378628bdb4053967c2c28f6dad73b64b\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/SplashScreen.scale-200.png\",\n    \"revision\": \"6ae2a03b511fb8cacb8a6d9bc10b418c\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/SplashScreen.scale-400.png\",\n    \"revision\": \"99680ce701b19fd3eea5897f6a90ba82\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square150x150Logo.scale-100.png\",\n    \"revision\": \"7cbd409ba9cfca1af0d618a04095648f\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square150x150Logo.scale-125.png\",\n    \"revision\": \"357637b11c9512a1e9f3e0872d7ee76b\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square150x150Logo.scale-150.png\",\n    \"revision\": \"238aab1c9cc591424c23ae5d8534e9be\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square150x150Logo.scale-200.png\",\n    \"revision\": \"8557621c4435961e6d06a2d346ceaf8c\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square150x150Logo.scale-400.png\",\n    \"revision\": \"f21cc3caef6419fed9cb899a5162f88b\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square310x310Logo.scale-100.png\",\n    \"revision\": \"1b067dfeb072cf5d618cf1f80c713021\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square310x310Logo.scale-125.png\",\n    \"revision\": \"db40d318e2f23128791f80d043a36e85\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square310x310Logo.scale-150.png\",\n    \"revision\": \"c2ea179b8b34c3ba3304bfaadd4f74a4\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square310x310Logo.scale-200.png\",\n    \"revision\": \"9c27f743dc0d633155bd4f127725c963\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square310x310Logo.scale-400.png\",\n    \"revision\": \"19fcb6b42c13e2282630cc129d21a51d\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.scale-100.png\",\n    \"revision\": \"279aac1d87d3d09665fb3f09bb35cf4c\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.scale-125.png\",\n    \"revision\": \"bab0eb97b1604eb05620838e0e392d56\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.scale-150.png\",\n    \"revision\": \"66007baacd7bb02902af73b88a14de26\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.scale-200.png\",\n    \"revision\": \"ad007be61a1279c209c5d6cb49db8dbb\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.scale-400.png\",\n    \"revision\": \"097b12fa860006ff595c75f787a7d876\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.targetsize-16_altform-unplated.png\",\n    \"revision\": \"cf17f52d47b83ac9169184c1652ce2bf\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.targetsize-16.png\",\n    \"revision\": \"cf17f52d47b83ac9169184c1652ce2bf\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.targetsize-24_altform-unplated.png\",\n    \"revision\": \"1514b7cfd4219e842b3c0394e8d0d462\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.targetsize-24.png\",\n    \"revision\": \"1514b7cfd4219e842b3c0394e8d0d462\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.targetsize-256_altform-unplated.png\",\n    \"revision\": \"d5c8a69dee879a55e8e06c389530a7e8\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.targetsize-256.png\",\n    \"revision\": \"d5c8a69dee879a55e8e06c389530a7e8\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.targetsize-32_altform-unplated.png\",\n    \"revision\": \"fa113a5cf442e25fece66b5b68741a21\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.targetsize-32.png\",\n    \"revision\": \"fa113a5cf442e25fece66b5b68741a21\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.targetsize-48_altform-unplated.png\",\n    \"revision\": \"e585f99a82d26fc26de6edd601882c75\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square44x44Logo.targetsize-48.png\",\n    \"revision\": \"e585f99a82d26fc26de6edd601882c75\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square71x71Logo.scale-100.png\",\n    \"revision\": \"0ebc24840106b7539e84ac5df6567433\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square71x71Logo.scale-125.png\",\n    \"revision\": \"d35c5741d5ad1dd405f9a44f02c12877\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square71x71Logo.scale-150.png\",\n    \"revision\": \"cf84ab9f55cce1832f2988139c63e0ee\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square71x71Logo.scale-200.png\",\n    \"revision\": \"3a50052d7177239ffc2d58f1128ca217\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Square71x71Logo.scale-400.png\",\n    \"revision\": \"ab41208c71e9476f2093be1373aa12ad\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/StoreLogo.png\",\n    \"revision\": \"b950510fe848e7b99166407a4007c933\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/StoreLogo.scale-100.png\",\n    \"revision\": \"b950510fe848e7b99166407a4007c933\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/StoreLogo.scale-125.png\",\n    \"revision\": \"e07b9e5496a2466733df2889663dfd82\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/StoreLogo.scale-150.png\",\n    \"revision\": \"52eba5706bcda00e6d062287255733f1\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/StoreLogo.scale-200.png\",\n    \"revision\": \"90ed5c1577d46447b0014ab415b5fc80\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/StoreLogo.scale-400.png\",\n    \"revision\": \"afd2a564e3c061f8572dd870015fa692\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Wide310x150Logo.scale-100.png\",\n    \"revision\": \"54c6bccb872fc59ca02870e50691cb85\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Wide310x150Logo.scale-125.png\",\n    \"revision\": \"78d14f41c0756ce69e500cfc7c8b9382\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Wide310x150Logo.scale-150.png\",\n    \"revision\": \"40a79f8e430d8946049dd125485b7346\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Wide310x150Logo.scale-200.png\",\n    \"revision\": \"fb47c4d6e1a68f35df7f59362cc068c6\"\n  },\n  {\n    \"url\": \"/img/icon/windows10/Wide310x150Logo.scale-400.png\",\n    \"revision\": \"6ae2a03b511fb8cacb8a6d9bc10b418c\"\n  },\n  {\n    \"url\": \"/img/images/BLTouch-ZOffset-1536x1152.jpg\",\n    \"revision\": \"c09cb05b9ca9f452167d453f090748b2\"\n  },\n  {\n    \"url\": \"/img/images/ender-3-pro-desktop-1536x1152.jpg\",\n    \"revision\": \"fdb9792cc60a6353f9b2b7455665707b\"\n  },\n  {\n    \"url\": \"/img/images/wxPython-RaspberryPi-1-1536x1152.jpg\",\n    \"revision\": \"31d591ef412c20066afccd677ad04963\"\n  },\n  {\n    \"url\": \"/img/KINtVbES59-128.jpeg\",\n    \"revision\": \"db6d970d20e27cfd5c7a57074b3a6d17\"\n  },\n  {\n    \"url\": \"/img/KINtVbES59-128.webp\",\n    \"revision\": \"081764d2e0fa7a12d0661c6014d0f147\"\n  },\n  {\n    \"url\": \"/img/marc-dobler-1536x1024.jpg\",\n    \"revision\": \"76688941cf6436accc25a653e7bf5304\"\n  },\n  {\n    \"url\": \"/img/x_ds1MX-bb-300.jpeg\",\n    \"revision\": \"90d0ef164be7f0d0d0c73e77c06e8f5f\"\n  },\n  {\n    \"url\": \"/img/x_ds1MX-bb-300.webp\",\n    \"revision\": \"bea3d6ac80bc84fff96207a73dccbdd0\"\n  },\n  {\n    \"url\": \"/img/x_ds1MX-bb-600.jpeg\",\n    \"revision\": \"9c394f01e12e81b354596617da39f65f\"\n  },\n  {\n    \"url\": \"/img/x_ds1MX-bb-600.webp\",\n    \"revision\": \"07b7d01cd00e242cbb5028a198cde218\"\n  },\n  {\n    \"url\": \"/js/main.js\",\n    \"revision\": \"002902ec5acc572a638118792e35aec4\"\n  },\n  {\n    \"url\": \"/me-curriculum-vitae/index.html\",\n    \"revision\": \"e1d711ee2e5e80d635c9fba6eb67c075\"\n  },\n  {\n    \"url\": \"/page-list/1/index.html\",\n    \"revision\": \"8bcd2e56075e3aa9e51657b766eb0266\"\n  },\n  {\n    \"url\": \"/page-list/2/index.html\",\n    \"revision\": \"4bb6e5e53082aeafcb5559116739b738\"\n  },\n  {\n    \"url\": \"/page-list/3/index.html\",\n    \"revision\": \"81dc500d2b9008597a7fec7cfe0b2d67\"\n  },\n  {\n    \"url\": \"/page-list/4/index.html\",\n    \"revision\": \"c79ed00ed777d042b90de8aa37be588e\"\n  },\n  {\n    \"url\": \"/page-list/index.html\",\n    \"revision\": \"aea7b731b9e5f76ca683f483695772ef\"\n  },\n  {\n    \"url\": \"/posts/Configuring-Marlin-2-0-for-an-Ender-3-Pro-and-BLTouch/index.html\",\n    \"revision\": \"ba29f8c63efb8d629754a4c9b8ff1e82\"\n  },\n  {\n    \"url\": \"/posts/fish-for-20G-nano-reefs/index.html\",\n    \"revision\": \"947416b376a396ad128ff81baca86417\"\n  },\n  {\n    \"url\": \"/posts/how-to-calibrate-z-offset-with-a-bltouch-bed-leveling-probe/index.html\",\n    \"revision\": \"bf9a98f4094a08550aaf7d86d5da3df7\"\n  },\n  {\n    \"url\": \"/posts/how-to-compile-and-install-wxPython-on-raspberry-pi/index.html\",\n    \"revision\": \"964a6d3a4c3abae21643d2a7cbfb6e25\"\n  },\n  {\n    \"url\": \"/posts/index.html\",\n    \"revision\": \"4f80913a1ad5f9ba0cc769f2c8e2d6c6\"\n  },\n  {\n    \"url\": \"/projects/diy-an-ATO-pump-for-pico-reef-tank/index.html\",\n    \"revision\": \"8712a0de63bf84549af6d421d40a3e3f\"\n  },\n  {\n    \"url\": \"/projects/index.html\",\n    \"revision\": \"7d23681e621d71f4054ef20303ae2fd8\"\n  },\n  {\n    \"url\": \"/projects/make-ESP32-temperature-probe/index.html\",\n    \"revision\": \"82615817efa9a090221b5748238af3ff\"\n  },\n  {\n    \"url\": \"/projects/pico-fish-tank/index.html\",\n    \"revision\": \"98d9d387531cd9a62eea1842434cb5f5\"\n  },\n  {\n    \"url\": \"/tags/3d-printer/index.html\",\n    \"revision\": \"b0367f5d564f55f66ec8102a623b06f2\"\n  },\n  {\n    \"url\": \"/tags/amphiprion/index.html\",\n    \"revision\": \"ea61b843aec6dfdd2d4da47d5ef1f6af\"\n  },\n  {\n    \"url\": \"/tags/arduino/index.html\",\n    \"revision\": \"306c147f7aa6094d2c1817d985ed72f2\"\n  },\n  {\n    \"url\": \"/tags/diy/index.html\",\n    \"revision\": \"6a16ab0825b9ed44055ac12a02f7439d\"\n  },\n  {\n    \"url\": \"/tags/ender-3/index.html\",\n    \"revision\": \"a54e780006b4d1f24955d9724d1f1a11\"\n  },\n  {\n    \"url\": \"/tags/ender/index.html\",\n    \"revision\": \"2bd5102a67737aa32e4de42711cc8a7a\"\n  },\n  {\n    \"url\": \"/tags/fish/index.html\",\n    \"revision\": \"4a9cf56e1af39d78186bdafd820cf70e\"\n  },\n  {\n    \"url\": \"/tags/index.html\",\n    \"revision\": \"ac5c053194d2fb3f517a83df521a2f56\"\n  },\n  {\n    \"url\": \"/tags/nano-reef-tank/index.html\",\n    \"revision\": \"de893a5f341e7338b2fb77a6140416a1\"\n  },\n  {\n    \"url\": \"/tags/nano-reef/index.html\",\n    \"revision\": \"48b9b29fbcdda84e6320cd09f2d202d8\"\n  },\n  {\n    \"url\": \"/tags/programming/index.html\",\n    \"revision\": \"8fe90f4a521ca17efd59516b65965227\"\n  },\n  {\n    \"url\": \"/tags/projects/index.html\",\n    \"revision\": \"ebb1ff2fb30f6089d0631a75a5e1561f\"\n  },\n  {\n    \"url\": \"/tags/python/index.html\",\n    \"revision\": \"940818478107cd5d0eea80c51f786a74\"\n  },\n  {\n    \"url\": \"/tags/reef-tank/index.html\",\n    \"revision\": \"6b1c2f0e965a80c1a1016a2f70e6b374\"\n  }\n], {\n  \"directoryIndex\": \"index.html\"\n});\nworkbox_precaching_cleanupOutdatedCaches();\n\n\n\nworkbox_routing_registerRoute(({url:e})=>!new RegExp(`.+\\\\.(?:${[\"jpg\",\"png\",\"gif\",\"ico\",\"svg\",\"jpeg\",\"avif\",\"webp\",\"eot\",\"ttf\",\"otf\",\"ttc\",\"woff\",\"woff2\"].join(\"|\")})`).test(e), new workbox_strategies_NetworkFirst(), 'GET');\nworkbox_routing_registerRoute(/.+\\.(?:eot|ttf|otf|ttc|woff|woff2|jpg|png|gif|ico|svg|jpeg|avif|webp)$/, new workbox_strategies_StaleWhileRevalidate(), 'GET');\n\n\n\n\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof module:workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof module:workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See\n * [PrecacheRoute options]{@link module:workbox-precaching.PrecacheRoute}.\n *\n * @memberof module:workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\nimport './_version.js';\n/**\n * Adds an `activate` event listener which will clean up incompatible\n * precaches that were created by older versions of Workbox.\n *\n * @memberof module:workbox-precaching\n */\nfunction cleanupOutdatedCaches() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('activate', ((event) => {\n        const cacheName = cacheNames.getPrecacheName();\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachesDeleted.length > 0) {\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\n                        `automatically:`, cachesDeleted);\n                }\n            }\n        }));\n    }));\n}\nexport { cleanupOutdatedCaches };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName;\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({ timeoutId, request, logs, handler });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return await handler.waitUntil(Promise.race(promises)) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                await networkPromise;\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` +\n                        ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler\n            .fetchAndCachePut(request)\n            .catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = await fetchAndCachePromise;\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n"],"names":["self","_","e","messageGenerator","code","args","msg","length","JSON","stringify","WorkboxError","Error","constructor","errorCode","details","name","normalizeHandler","handler","handle","Route","match","method","setCatchHandler","catchHandler","RegExpRoute","regExp","url","result","exec","href","origin","location","index","slice","Router","_routes","Map","_defaultHandlerMap","routes","this","addFetchListener","addEventListener","event","request","responsePromise","handleRequest","respondWith","addCacheListener","data","type","payload","requestPromises","Promise","all","urlsToCache","map","entry","Request","waitUntil","ports","then","postMessage","URL","protocol","startsWith","sameOrigin","params","route","findMatchingRoute","has","get","err","reject","_catchHandler","catch","async","catchErr","matchResult","Array","isArray","Object","keys","undefined","setDefaultHandler","set","registerRoute","push","unregisterRoute","routeIndex","indexOf","splice","defaultRouter","getOrCreateDefaultRouter","capture","captureUrl","RegExp","moduleName","funcName","paramName","cacheOkAndOpaquePlugin","cacheWillUpdate","response","status","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","join","cacheNames","fn","key","eachCacheNameDetail","userCacheName","stripParams","fullURL","ignoreParams","strippedURL","param","searchParams","delete","Deferred","promise","resolve","quotaErrorCallbacks","Set","toRequest","input","StrategyHandler","strategy","options","_cacheKeys","assign","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","plugin","mode","FetchEvent","preloadResponse","possiblePreloadResponse","originalRequest","hasCallback","clone","cb","iterateCallbacks","thrownErrorMessage","message","pluginFilteredRequest","fetchResponse","fetch","fetchOptions","callback","error","runCallbacks","responseClone","cachePut","cachedResponse","matchOptions","effectiveRequest","getCacheKey","multiMatchOptions","caches","ms","setTimeout","String","replace","responseToCache","_ensureResponseSafeToCache","cache","open","hasCacheUpdateCallback","oldResponse","strippedRequestURL","keysOptions","ignoreSearch","cacheKeys","cacheKey","cacheMatchIgnoreParams","put","executeQuotaErrorCallbacks","newResponse","state","statefulCallback","statefulParam","shift","destroy","pluginsUsed","Strategy","responseDone","handleAll","_getResponse","_awaitComplete","_handle","doneWaiting","waitUntilError","asyncFn","returnPromise","createCacheKey","urlObject","revision","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","cachedResponseWillBeUsed","PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","_precacheController","getCacheKeyForURL","headers","supportStatus","copyResponse","modifier","clonedResponse","responseInit","Headers","statusText","modifiedResponseInit","body","testResponse","Response","canConstructResponseFromBodyStream","blob","PrecacheStrategy","_fallbackToNetwork","fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","cacheMatch","_handleInstall","_handleFetch","integrityInManifest","integrity","integrityInRequest","noIntegrityConflict","_useDefaultCacheabilityPluginIfNeeded","defaultPluginIndex","cacheWillUpdatePluginCount","entries","defaultPrecacheCacheabilityPlugin","redirected","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","install","bind","activate","addToCacheList","_installAndActiveListenersAdded","urlsToWarnAbout","cacheMode","firstEntry","secondEntry","warningMessage","console","warn","installReportPlugin","credentials","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","getURLsToCacheKeys","getCachedURLs","getIntegrityForCacheKey","createHandlerBoundToURL","getOrCreatePrecacheController","PrecacheRoute","urlsToCacheKeys","possibleURL","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","some","test","removeIgnoredSearchParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","generateURLVariations","skipWaiting","clients","claim","addRoute","currentPrecacheName","substringToFind","cacheNamesToDelete","includes","deleteOutdatedCaches","cachesDeleted","workbox_routing_registerRoute","p","unshift","_networkTimeoutSeconds","networkTimeoutSeconds","logs","promises","timeoutId","id","_getTimeoutPromise","networkPromise","_getNetworkPromise","race","fetchAndCachePut","fetchError","clearTimeout","fetchAndCachePromise"],"mappings":"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CK,oCAEd,KACS,iDACK,oCAEd,KACS,mDACK,oCAEd,KACS,gDACK,oCAEd,KACS,8CACK,oCAEd,KACS,iDACK,oCAEd,KACS,qDACK,oCAEd,KACS,gDACK,oCAEd,KACS,6CACK,oCAEd,KACS,gDACK,oCAEd,KACS,8CACK,oCAEd,KACS,8CACK,oCAEd,KACS,kDACK,oCAEd,KACS,oDACK,oCAEd,KACS,4BACK,oCAEd,KACS,gDACK,oCAEd,KACS,kDACK,oCAEd,KACS,+CACK,oCAEd,KACS,gDACK,oCAEd,KACS,6CACK,oCAEd,KACS,6CACK,oCAEd,KACS,6CACK,oCAEd,KACS,iDACK,oCAEd,KACS,oDACK,oCAEd,KACS,oDACK,oCAEd,KACS,oDACK,oCAEd,KACS,mDACK,oCAEd,KACS,qDACK,oCAEd,KACS,oDACK,oCAEd,KACS,mDACK,oCAEd,KACS,oDACK,oCAEd,KACS,iDACK,oCAEd,KACS,mDACK,oCAEd,KACS,+CACK,oCAEd,KACS,uDACK,oCAEd,KACS,4CACK,oCAEd,KACS,wCACK,oCAEd,KACS,4CACK,oCAEd,KACS,6CACK,oCAEd,KACS,kDACK,oCAEd,KACS,oDACK,oCAEd,KACS,oDACK,oCAEd,KACS,+CACK,oCAEd,KACS,gDACK,oCAEd,KACS,kCACK,oCAEd,KACS,kCACK,oCAEd,KACS,kCACK,oCAEd,KACS,kCACK,oCAEd,KACS,kCACK,oCAEd,KACS,kCACK,oCAEd,KACS,kCACK,oCAEd,KACS,kCACK,oCAEd,KACS,8CACK,oCAEd,KACS,8CACK,oCAEd,KACS,iDACK,oCAEd,KACS,iDACK,oCAEd,KACS,gDACK,oCAEd,KACS,8DACK,oCAEd,KACS,8DACK,oCAEd,KACS,4DACK,oCAEd,KACS,8DACK,oCAEd,KACS,4DACK,oCAEd,KACS,4DACK,oCAEd,KACS,gDACK,oCAEd,KACS,qEACK,oCAEd,KACS,qDACK,oCAEd,KACS,8DACK,oCAEd,KACS,yDACK,oCAEd,KACS,uDACK,oCAEd,KACS,yDACK,oCAEd,KACS,uDACK,oCAEd,KACS,uDACK,oCAEd,KACS,uDACK,oCAEd,KACS,uDACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,iDACK,oCAEd,KACS,0DACK,oCAEd,KACS,2DACK,oCAEd,KACS,2DACK,oCAEd,KACS,2DACK,oCAEd,KACS,2DACK,oCAEd,KACS,+DACK,oCAEd,KACS,8DACK,oCAEd,KACS,8DACK,oCAEd,KACS,4DACK,oCAEd,KACS,4DACK,oCAEd,KACS,4DACK,oCAEd,KACS,4DACK,oCAEd,KACS,yDACK,oCAEd,KACS,yDACK,oCAEd,KACS,yDACK,oCAEd,KACS,8DACK,oCAEd,KACS,4DACK,oCAEd,KACS,4DACK,oCAEd,KACS,iEACK,oCAEd,KACS,iEACK,oCAEd,KACS,iEACK,oCAEd,KACS,gEACK,oCAEd,KACS,8DACK,oCAEd,KACS,8DACK,oCAEd,KACS,gEACK,oCAEd,KACS,8DACK,oCAEd,KACS,8DACK,oCAEd,KACS,0DACK,oCAEd,KACS,0DACK,oCAEd,KACS,0DACK,oCAEd,KACS,0DACK,oCAEd,KACS,0DACK,oCAEd,KACS,+DACK,oCAEd,KACS,+DACK,oCAEd,KACS,+DACK,oCAEd,KACS,+DACK,oCAEd,KACS,+DACK,oCAEd,KACS,+DACK,oCAEd,KACS,+DACK,oCAEd,KACS,+DACK,oCAEd,KACS,+DACK,oCAEd,KACS,+DACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,kFACK,oCAEd,KACS,iEACK,oCAEd,KACS,kFACK,oCAEd,KACS,iEACK,oCAEd,KACS,mFACK,oCAEd,KACS,kEACK,oCAEd,KACS,kFACK,oCAEd,KACS,iEACK,oCAEd,KACS,kFACK,oCAEd,KACS,iEACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,6CACK,oCAEd,KACS,uDACK,oCAEd,KACS,uDACK,oCAEd,KACS,uDACK,oCAEd,KACS,uDACK,oCAEd,KACS,uDACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,6DACK,oCAEd,KACS,qDACK,oCAEd,KACS,yDACK,oCAEd,KACS,4DACK,oCAEd,KACS,oCACK,oCAEd,KACS,oCACK,oCAEd,KACS,0CACK,oCAEd,KACS,oCACK,oCAEd,KACS,oCACK,oCAEd,KACS,oCACK,oCAEd,KACS,oCACK,oCAEd,KACS,uBACK,oCAEd,KACS,2CACK,oCAEd,KACS,mCACK,oCAEd,KACS,mCACK,oCAEd,KACS,mCACK,oCAEd,KACS,mCACK,oCAEd,KACS,iCACK,oCAEd,KACS,mFACK,oCAEd,KACS,qDACK,oCAEd,KACS,yFACK,oCAEd,KACS,iFACK,oCAEd,KACS,6BACK,oCAEd,KACS,mEACK,oCAEd,KACS,gCACK,oCAEd,KACS,6DACK,oCAEd,KACS,+CACK,oCAEd,KACS,uCACK,oCAEd,KACS,uCACK,oCAEd,KACS,oCACK,oCAEd,KACS,gCACK,oCAEd,KACS,oCACK,oCAEd,KACS,kCACK,oCAEd,KACS,iCACK,oCAEd,KACS,4BACK,oCAEd,KACS,2CACK,oCAEd,KACS,sCACK,oCAEd,KACS,wCACK,oCAEd,KACS,qCACK,oCAEd,KACS,mCACK,oCAEd,KACS,sCACK,sCGz0BhB,SAAkBgC,SACRkF,EAAqB6D,IAE3BnM,EADsB,IAAIoM,EAAc9D,EAAoBlF,IJD5DsK,CAAStK,GKPTzI,KAAKyC,iBAAiB,YAAcC,UAC1BsE,EAAYI,IAClB1E,EAAMgB,UCMeiB,OAAOqO,EAAqBC,EAnB/B,sBAqBhBC,SADmBlT,KAAK4K,OAAO3F,QACCgC,QAAQD,GACnCA,EAAUmM,SAASF,IACtBjM,EAAUmM,SAASnT,KAAK6G,aAAaC,QACrCE,IAAcgM,iBAEhB5P,QAAQC,IAAI6P,EAAmB3P,KAAKyD,GAAchH,KAAK4K,OAAO7C,OAAOf,MACpEkM,GDdaE,CAAqBpM,GAAWpD,MAAMyP,YJs1B9DC,GAA8B,EAAE5R,IAAIxB,MAAM,IAAI6F,OAAQ,WAAU,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO,OAAO,OAAO,MAAM,MAAM,MAAM,MAAM,OAAO,SAASoB,KAAK,SAASgL,KAAKjS,IAAI,IM70BnL,cAA2BoM,EAoBvB1L,YAAY6H,EAAU,UACZA,GAGDlG,KAAKyG,QAAQkJ,MAAMqB,GAAM,oBAAqBA,UAC1CvK,QAAQwK,QAAQrN,QAEpBsN,EAAyBhL,EAAQiL,uBAAyB,UAmBrD/Q,EAAS1B,SACb0S,EAAO,GASPC,EAAW,OACbC,KACAtR,KAAKkR,EAAwB,OACvBK,GAAEA,EAAF7L,QAAMA,GAAY1F,KAAKwR,EAAmB,CAAEpR,QAAAA,EAASgR,KAAAA,EAAM1S,QAAAA,IACjE4S,EAAYC,EACZF,EAAStO,KAAK2C,SAEZ+L,EAAiBzR,KAAK0R,EAAmB,CAAEJ,UAAAA,EAAWlR,QAAAA,EAASgR,KAAAA,EAAM1S,QAAAA,IAC3E2S,EAAStO,KAAK0O,SACR3N,QAAiBpF,EAAQyC,UAAU,gBAExBzC,EAAQyC,UAAUN,QAAQ8Q,KAAKN,WAMlCI,EAR2B,QAkBpC3N,QACK,IAAI3F,EAAa,cAAe,CAAEgB,IAAKiB,EAAQjB,aAElD2E,EAWX0N,GAAmBpR,QAAEA,EAAFgR,KAAWA,EAAX1S,QAAiBA,QAC5B4S,QAWG,CACH5L,QAXmB,IAAI7E,SAAS8E,IAQhC2L,EAAY/I,YAPanG,UAKrBuD,QAAcjH,EAAQgO,WAAWtM,MAEkC,IAA9BJ,KAAKkR,MAI9CK,GAAID,YAaaA,UAAEA,EAAFlR,QAAaA,EAAbgR,KAAsBA,EAAtB1S,QAA4BA,QAC7CkJ,EACA9D,MAEAA,QAAiBpF,EAAQkT,iBAAiBxR,GAE9C,MAAOyR,GACCA,aAAsBzT,QACtBwJ,EAAQiK,UAGZP,GACAQ,aAAaR,IAWb1J,GAAU9D,IACVA,QAAiBpF,EAAQgO,WAAWtM,IAWjC0D,IN8qB2M,OAC1NiN,EAA8B,yEAA0E,IOz0BxG,cAAmChH,EAc/B1L,YAAY6H,EAAU,UACZA,GAGDlG,KAAKyG,QAAQkJ,MAAMqB,GAAM,oBAAqBA,UAC1CvK,QAAQwK,QAAQrN,WAUfxD,EAAS1B,SAUbqT,EAAuBrT,EACxBkT,iBAAiBxR,GACjB+B,OAAM,aAKPyF,EADA9D,QAAiBpF,EAAQgO,WAAWtM,MAEpC0D,YAcIA,QAAiBiO,EAErB,MAAO/P,GACCA,aAAe5D,QACfwJ,EAAQ5F,OAYf8B,QACK,IAAI3F,EAAa,cAAe,CAAEgB,IAAKiB,EAAQjB,IAAKyI,MAAAA,WAEvD9D,IPyvBwI"}